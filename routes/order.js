const express = require('express');
const router = express.Router();
const sql = require('mssql');
const moment = require('moment');

const priceFormat = (price) => {
    return 'CAD$ ' + Number(price).toFixed(2);
};

router.get('/', function (req, res, next) {
    res.setHeader('Content-Type', 'text/html');

    let customerId = req.query.customerId;
    let validIDstr = customerId;
    let cartSize = '';
    let isValid = false;

    let productList = false;
    if (req.session.productList && req.session.productList.length > 0) {
        productList = req.session.productList;
    }

    /**
    Determine if valid customer id was entered
    Determine if there are products in the shopping cart
    If either are not true, display an error message
    **/
    (async function () {
        let pool = await sql.connect(dbConfig);

        let custIDQuery = 'SELECT customerId FROM customer'

        let preppedSql = new sql.PreparedStatement(pool);
        preppedSql.input('customerId', sql.Int);
        await preppedSql.prepare(custIDQuery);

        let results = await preppedSql.execute({});

        // Check if ID is valid.
        for (let cid of results.recordset)
        {
            if (!isNaN(customerId) && customerId == cid.customerId)
                isValid = true;
        }

        if (!isValid) {
            validIDstr = 'Invalid Customer ID';
        }

        if (productList) {
            cartSize = productList.length;
        } else {
            cartSize = 'The cart is empty!!';
        }

        return [validIDstr, cartSize];
    })().then(([validIDstr, cartSize]) => {
        res.render('order', {
            title: 'Bytesized Customer Order',
            validIDstr: validIDstr,
            cartSize: cartSize,
            helpers: {
                priceFormat
            }
        });
    }).catch(err => {
        console.dir(err);
        res.send(err);
    });


    /** Make connection and validate **/

    /** Save order information to database**/


    /**
    // Use retrieval of auto-generated keys.
    sqlQuery = "INSERT INTO <TABLE> OUTPUT INSERTED.orderId VALUES( ... )";
    let result = await pool.request()
        .input(...)
        .query(sqlQuery);
    // Catch errors generated by the query
    let orderId = result.recordset[0].orderId;
    **/

    /** Insert each item into OrderedProduct table using OrderId from previous INSERT **/

    /** Update total amount for order record **/

    /** For each entry in the productList is an array with key values: id, name, quantity, price **/

    /**
        for (let i = 0; i < productList.length; i++) {
            let product = products[i];
            if (!product) {
                continue;
            }
            // Use product.id, product.name, product.quantity, and product.price here
        }
    **/

    /** Print out order summary **/

    /** Clear session/cart **/

});

module.exports = router;
